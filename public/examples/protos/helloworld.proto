// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "other_protos.proto";
import "google/protobuf/descriptor.proto";

package helloworld;


service Greeter {
  /**
  Hello, how are you?
   */
  rpc SayHello(HelloRequest) returns (HelloReply);
  /// unary call
  // server streaming call
  rpc SayRepeatHello(RepeatHelloRequest) returns (stream HelloReply);
}

service GreeterSecond {
  /**
  Hello, how are you?
   */
  rpc SayHello(HelloRequest) returns (HelloReply);
  /// unary call
  // server streaming call
  rpc SayRepeatHello(RepeatHelloRequest) returns (stream HelloReply);
}

/**
Hello, how are you?
 */
message HelloRequest {
  /**
  Oj, how are you?
   */
  string name = 1;
}

message RepeatHelloRequest {
  string name = 1;
  int32 count = 2;
}

message HelloReply {
  reserved "foo", "bar";
  string message = 1;
}

message HelloReplyWithInner {
  string message = 1;
  MiddleAA.Inner inner = 2;

  message MiddleAA {  // Level 1
    message Inner {   // Level 2
      int64 ival = 1;
      bool  booly = 2;
    }
  }
}

extend google.protobuf.EnumValueOptions {
  optional string string_name = 123456789;
}

enum Corpus {
  CORPUS_UNSPECIFIED = 0;
  CORPUS_UNIVERSAL = 1 [deprecated = true];
  CORPUS_WEB = 2;
  CORPUS_IMAGES = 3;
  CORPUS_LOCAL = 4;
  CORPUS_NEWS = 5;
  CORPUS_PRODUCTS = 6 [
    (string_name) = "Products",
    deprecated = false
  ];
  CORPUS_VIDEO = 7;
}

message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 results_per_page = 3;
  Corpus corpus = 4;
}

enum EnumAllowingAlias {
  option allow_alias = true;
  EAA_UNSPECIFIED = 0;
  EAA_STARTED = 1;
  EAA_RUNNING = 1;
  EAA_FINISHED = 2;
}